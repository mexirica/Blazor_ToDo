@page "/"
@inject HttpClient http

<h1>Tarefas</h1>
<hr />


@if (tarefas == null)
{
    <p>Carregando...</p>
}
else if (!tarefas.Any())
{
    <p>Ainda não existem tarefas</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
            <td>Ação</td>
            <th>Data</th>
            <th>Descrição</th>
            <th>Concluida</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tarefas)
            {
                <tr>
                    <td><button @onclick="(() => RemoveTarefa(item.ID))"><i class="oi oi-trash"></i></button></td>
                    <td>@item.DataCriacao</td>
                    <td>@item.Descricao</td>
                    <td><input type="checkbox" @bind="item.Concluida" /></td>

                </tr>
            }
        </tbody>
    </table>
}

@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="Text" placeholder="Informe a tarefa" @bind="novatarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}


@code{

    protected override async Task OnInitializedAsync()
    {
        tarefas = await http.GetFromJsonAsync<List<Tarefa>>("dados/tarefas.json");

    }

    public class Tarefa
    {
        public int ID { get; set; }
        public string Descricao { get; set; }
        public bool Concluida { get; set; }
        public DateTime DataCriacao { get; set; }
    }

    private string novatarefa = "";

    private List<Tarefa> tarefas = new List<Tarefa>();

    void AdicionarNovaTarefa()
    {
        int ultimo_id = tarefas.Last().ID;
        Console.WriteLine(ultimo_id);

        if (!string.IsNullOrWhiteSpace(novatarefa))
        {
            tarefas.Add(new Tarefa
                {
                    DataCriacao = DateTime.Now,
                    Descricao = novatarefa,
                    ID = ultimo_id + 1

                });
            novatarefa = "";
        }
    }

    private void RemoveTarefa(int id)
    {
        tarefas.Remove(tarefas.First(x => x.ID == id));
    }
}